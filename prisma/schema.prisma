generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["omitApi"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// START: User model -----------------------------------------------------------------------------------
model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  phone    String  @unique
  role     Role    @default(USER)
  name     String?
  password String?
  email    String? @unique
  jobTitle String?

  OTPCode   OTPCode?
  Orders    Order[]
  BlogPosts BlogPost[]
}

enum Role {
  USER
  ADMIN
  SUPERADMIN
}

// END: User model -----------------------------------------------------------------------------------

// START: Attachment model -----------------------------------------------------------------------------------
model Attachment {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  key                 String
  originalName        String
  mimeType            String
  retaledBlogPostId   Int?
  blogPostThumbnailId Int?   @unique

  BlogPostThumnbail BlogPost? @relation(fields: [blogPostThumbnailId], references: [id])
}

// END: Attachment model -----------------------------------------------------------------------------------

// START: Log model -------------------------------------------------------------------------------------
model Log {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  type       String
  url        String
  method     String
  statusCode Int
  response   Json?
  body       Json?
  query      Json?
  params     Json?
  user       Json?
  rawHeaders Json?
  error      Json?
}

// END: Log model --------------------------------------------------------------------------------------

// START: FAQ model -----------------------------------------------------------------------------------
model FAQ {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  category FAQCategory
  question String
  answer   String
  linkText String?
  linkHref String?
  position Int         @unique
  featured Boolean     @default(false)
}

enum FAQCategory {
  PRE_FABRICATED
  ORDER_PROCESS
  PAYMENT_TERMS
  CONSTRUCTION_COST
  PERMITS
}

// END: FAQ model -----------------------------------------------------------------------------------

// START: OTPCode model -----------------------------------------------------------------------------------
model OTPCode {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  code      Int
  expiredAt DateTime
  userId    Int      @unique

  user User @relation(fields: [userId], references: [id])
}

// END: OTPCode model -----------------------------------------------------------------------------------

// START: Material model -----------------------------------------------------------------------------------
model Material {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  unit      MaterialUnits
  unitPrice BigInt        @default(0)
  title     String        @unique

  StructureMaterial StructureMaterial[]
}

enum MaterialUnits {
  KG
  M
  M2
  M3
}

// END: Material model -----------------------------------------------------------------------------------

// START: StructureFeature model -----------------------------------------------------------------------------------
model StructureFeature {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  unitPrice   BigInt  @default(0)
  title       String  @unique
  description String?

  structure Structure[]
  Order     Order[]
}

// END: StructureFeature model -----------------------------------------------------------------------------------

// START: StructureMaterial model -----------------------------------------------------------------------------------
model StructureMaterial {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  quantity    Int
  materialId  Int
  structureId Int

  material  Material  @relation(fields: [materialId], references: [id])
  Structure Structure @relation(fields: [structureId], references: [id])
}

// END: StructureMaterial model -----------------------------------------------------------------------------------

// START: Facade model -----------------------------------------------------------------------------------
model Facade {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  color        String
  title        String
  modelKey     String
  thumbnailKey String
  structureId  Int

  structure Structure @relation(fields: [structureId], references: [id])
  Orders    Order[]
}

// END: Facade model -----------------------------------------------------------------------------------

// START: Structure model -----------------------------------------------------------------------------------
model Structure {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  application  Json // an array of StructureApplications
  floorsNumber Int
  sizeFrom     Int
  sizeTo       Int
  province     Json

  facades           Facade[]
  materials         StructureMaterial[]
  structureFeatures StructureFeature[]
}

enum StructureApplications {
  TOURISM
  OFFICIAL
  RESIDENTIAL
  TREATMENT
}

// END: Structure model -----------------------------------------------------------------------------------

// START: BlogPost model -----------------------------------------------------------------------------------
model BlogPost {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  slug       String  @unique
  title      String
  shortBody  String
  body       String  @db.Text
  userId     Int
  ctaText    String?
  ctaBtnText String?
  ctaBtnHref String?

  thumbnail      Attachment?
  author         User           @relation(fields: [userId], references: [id])
  blogCategories BlogCategory[]
}

// END: BlogPost model -----------------------------------------------------------------------------------

// START: BlogCategory model -----------------------------------------------------------------------------------
model BlogCategory {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title String @unique

  blogPosts BlogPost[]
}

// END: BlogCategory model -----------------------------------------------------------------------------------

// START: Order model -----------------------------------------------------------------------------------
model Order {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  application       StructureApplications
  floorsNumber      Int
  size              Int
  province          Json
  userId            Int
  city              String?
  village           String?
  neighborhood      String?
  facadeTitle       String?
  facadeId          Int?
  structureFeatures StructureFeature[]
  status            OrderStatus           @default(PENDING)

  facade Facade? @relation(fields: [facadeId], references: [id])
  user   User    @relation(fields: [userId], references: [id])
}

enum OrderStatus {
  PENDING
  SUCCESSFUL
  CANCELLED
}

// END: Order model -----------------------------------------------------------------------------------
